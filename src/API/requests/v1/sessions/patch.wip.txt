// import { API_Methods, API_Request_Files, ConnectionInfo } from "../../../../shared/schemas/api.d.ts";
// import { hasPermission, permissionsMap } from "../../../../shared/schemas/misc.ts";
// import { API_Stages, Session, SessionCreateArgs, Sessions, SessionScopes } from "../../../../shared/utils/api.ts";
// import { misc } from "../../../../shared/utils/config.ts";
// import { Utilities } from "../../../../shared/utils/utils.ts";

// const data_blueprint = {
// 	jwtToken: "",
// 	changes: {},
// };
// export default {
// 	method: ["PATCH"],
// 	version: 1,
// 	route: "session/manage",

// 	exec: async (session: Session, data: Record<string, unknown>): Promise<{ status: number; message: string; data: unknown }> => {
// 		hasPermission(session, "session/manage");
// 		if (!session.scopes.global[permissionsMap["session/manage"]]) return { status: 403, message: `❌ | You must have the \`${permissionsMap["session/manage"]}\` permission to run this`, data: null };

// 		const missingKeys = Object.keys(data_blueprint).filter((key) => !(key in data));

// 		if (missingKeys.length > 0) {
// 			return { status: 400, message: `Data is missing the following:\n ${missingKeys.join("\n")}`, data: missingKeys };
// 		}
// 		const [res, err] = await new Sessions(data.devMode as boolean).pa
// 		});

// 		Utilities.debugLog("DEBUG", `Created a session${err != undefined ? `\nerr: ${err}` : ""}`, { fileDir: import.meta.filename });

// 		if (!err) return { status: 200, message: `✅ | Created a session`, data: res };
// 		return { status: 500, message: `❌ | Couldn't create a session`, data: res };
// 	},
// 	// deno-lint-ignore no-explicit-any
// } as { method: Array<API_Methods>; route: keyof typeof permissionsMap; version: number; exec: () => Promise<{ status: number; message: string; data: any }> | { status: number; message: string; data: any } };
